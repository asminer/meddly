
Interface changes (aside from moving header files around)
======================================================================

Forest cleanup
    -> replace expert_forest with forest in compute tables, operations
        -> split out and simplify (templates and functors) the
            apply_generic_mdd style classes
                (goal is for 'check terminals' to be inlined, not virtual)


(*) operation registry in a forest - timing test

(*) node_storage::getDownPtr timing test

(*) One version of node_storage::getDownPtr, using edge_value

(*) binary operations:

    * change interface to use edge_value, node_handle instead of dd_edge
    * keep dd_edge version as inlined


Go through examples/ directory,
see if some stuff can become test cases


Files that need updating / cleanup
------------------------------------------------------------
defines.h
enumerator.h            enumerator.cc
forest.h                forest.cc
hash_stream.h
heap.h
impl_unique_table.h     impl_unique_table.cc
loggers.h               loggers.cc
memory.h                memory.cc
opname.h                opname.cc
opname_numer.h          opname_numer.cc
opname_satur.h          opname_satur.cc

oper.h                  oper.cc
oper_binary.h           oper_binary.cc
oper_unary.h            oper_unary.cc

relation_node.h         relation_node.cc


======================================================================
Non-critical to do list (side quests)
======================================================================
* Minterm collections, unioning with existing sets
    full / sparse minterms
    sets / relations

* Evaluation by overloading() on dd_edge?
    Using a single minterm? Or vector of integers?

* Enumeration
    Tie to evaluation?
    Have 'fixed' variables and 'free' variables
        all fixed: evaluation
        all free:  old enumeration
        primed / unprimed are fixed: like old row / col enumerators

    Fixed levels: use full unpacked
    Free levels : use sparse unpacked

* Creating functions for variables
    also functions of single variables
    currently in forest, does it belong there?
    maybe goes with sparse minterm collections?

* all different operation
    intersect a function with 'this set of vars
    must be all different`.
    Limit to possible values {0, ..., 31} so we can
    use unsigned ints for the set of taken values?

* existential quantification operation
    boolean only? or describe as "max value over these vars"?

* universal quantification operation
    boolean only? or describe as "min value over these vars"?

