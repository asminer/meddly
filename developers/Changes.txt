
Interface changes (aside from moving header files around)
======================================================================

Next release:

Make compute table interface easier to use for simple operations
    (i.e., most of the time)

    * compute table item class, like edge value class
        type, and a union


Next release:

Reimplement operations.

Depending on how that goes, maybe adjust the operation hierarchy?

        some thoughts:
            operation
                |
                +--- binary_operation
                        |
                        +---- binary skip levels
                        |           inline void compute_top(
                        |               const dd_edge &a,
                        |               const dd_edge &b, dd_edge c)
                        |
                        |           node_handle compute(node_handle a,
                        |               node_handle b)
                        |
                        +---- binary by levels (for quasi reduced results)
                        |
                        |           node_handle compute(int K,
                        |               node_handle a, node_handle b)
                        |
                        +---- binary, EV, skip levels
                        |
                        |           compute(const edge_value &av,
                        |               node_handle an, const edge_value &,
                        |               node_handle bn, edge_value &ec,
                        |               node_handle &cn)
                        |
                        |           We could use the same iface for MT
                        |           using void edge values, see if there's
                        |           overhead and if so keep them split.
                        |
                        +---- binary, EV, by levels


Although, if we make compute tables easy enough to use, then
the motivation for abstract apply operation implementation goes away.

Ideal:
    void union::compute(node_handle a, node_handle b, node_handle &c)
    {
        if (0==a) return b;
        if (0==b) return a;
        if (1==a) return 1;
        if (1==b) return 1;
        if (a==b) return a; // same forest only

        commute_order(a, b);    // if we can commute, make sure a<b

        ct_search key(entry0, a, b);

        if (CT.find(key, c)) {
          return;
        }

        // do computation

        CT.add(key, c);

    }



Forest cleanup
    look at node reductions

Operations
        -> split out and simplify (templates and functors) the
            apply_generic_mdd style classes
                (goal is for 'check terminals' to be inlined, not virtual)


(*) node_storage::getDownPtr timing test

(*) One version of node_storage::getDownPtr, using edge_value





Go through examples/ directory,
see if some stuff can become test cases


Files that need updating / cleanup
------------------------------------------------------------
defines.h
enumerator.h            enumerator.cc
forest.h                forest.cc
hash_stream.h
heap.h
impl_unique_table.h     impl_unique_table.cc
loggers.h               loggers.cc
memory.h                memory.cc
opname.h                opname.cc
opname_numer.h          opname_numer.cc
opname_satur.h          opname_satur.cc

oper.h                  oper.cc
oper_binary.h           oper_binary.cc
oper_unary.h            oper_unary.cc

relation_node.h         relation_node.cc


======================================================================
Non-critical to do list (side quests)
======================================================================
* Minterm collections, unioning with existing sets
    full / sparse minterms
    sets / relations

* Evaluation by overloading() on dd_edge?
    Using a single minterm? Or vector of integers?

* Enumeration
    Tie to evaluation?
    Have 'fixed' variables and 'free' variables
        all fixed: evaluation
        all free:  old enumeration
        primed / unprimed are fixed: like old row / col enumerators

    Fixed levels: use full unpacked
    Free levels : use sparse unpacked

* Creating functions for variables
    also functions of single variables
    currently in forest, does it belong there?
    maybe goes with sparse minterm collections?

* all different operation
    intersect a function with 'this set of vars
    must be all different`.
    Limit to possible values {0, ..., 31} so we can
    use unsigned ints for the set of taken values?

* existential quantification operation
    boolean only? or describe as "max value over these vars"?

* universal quantification operation
    boolean only? or describe as "min value over these vars"?

* interval decision diagrams?
