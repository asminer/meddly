#!/bin/bash
#
# Massive script to run benchmark tests
#

EXDIR=examples
SRCDIR=src

if [ ! -d $EXDIR ]; then
    EXDIR=../examples
    SRCDIR=../src
fi
if [ ! -d $EXDIR ]; then
    echo "Can't find examples directory; run this script in"
    echo "the root directory or within developers/."
    exit 1
fi
if [ ! -d $SRCDIR ]; then
    echo "Can't find src directory; run this script in"
    echo "the root directory or within developers/."
    exit 1
fi

#
# Process switches (these are new!)
#

while [ $# -gt 0 ]; do
  case "$1"
  in
      -h)
          HTMLFILE=$2
          echo Appending html to file: $2
          shift
          shift
      ;;

      -t)
          TEXTFILE=$2
          echo Writing text summary to file: $2
          shift
          shift
      ;;

      *)
          printf "\nUsage: $0 [options]\n\nOptions:\n";
          printf "\t-h <file>   Append output, in html table format, to file.\n"
          printf "\t-t <file>   Write  output, in text format, to file.\n"
          printf "\n"
          exit 1
      ;;
  esac
done

#
# Quick sanity check
#
if [ ! -f $EXDIR/kanban ]; then
  echo "Can't find executables."
  echo "Are you running this in the main directory?"
  exit
fi

#
# Set up our temporary files
#
PIDTXT=`mktemp /tmp/pids.txt.XXXXXX`
OUTTXT=`mktemp /tmp/out.txt.XXXXXX`
TIMESTXT=`mktemp /tmp/times.txt.XXXXXX`

#
# Prevent jobs from exceeding time limit
#
sleepandkill()
{
  sleep 1024 &
  slid=$!
  echo $slid >> $PIDTXT
  wait $slid
  if kill -9 $1 > /dev/null 2> /dev/null; then
    printf "\n\nTIMEOUT: 1000 seconds exceeded --- job killed\n\n"
  fi
}

time2sec()
{
  if [ "x$1" != "x" ]; then
    tts=`echo $1 | tr 'ms' '  ' | awk '{print $1*60+$2}'`
  else
    tts="$1"
  fi
  echo "$tts" | awk '{if ($1 > 999) print "999+"; else if ($1 < 1) print "N/A"; else printf("%3.2f\n",$1)}'
}

printtime()
{
  if [ "x$2" != "x" ]; then
    sec=`time2sec $2`
    # sec=`echo $2 | tr 'ms' '  ' | awk '{print $1*60+$2}'`
    # real=`echo $3 | tr 'ms' '  ' | awk '{print $1*60+$2}'`
    # printf "%20s %10s s.user  %10s s.real peak: " "$1" $sec $real
    printf "%20s %10s s.user peak: " "$1" $sec
    echo $4
    nsec=`echo $sec | awk '{print $1+0}'`
    total="$total + $nsec"
  fi
}

printcount()
{
  printf "\t"
  mult="1000000000"
  z="0"
  x=$1
  while [ $mult -gt 1 ]; do
    d=$[ x / mult ];
    x=$[ x % mult ];
    if [ $d -gt 0 ]; then
      if [ $z -gt 0 ]; then
        printf "%03d," $d
      else
        printf "%d," $d
        z="1"
      fi
    fi
    mult=$[ mult / 1000 ];
  done
  if [ $z -gt 0 ]; then
    printf "%03d" $x
  else
    printf "%d" $x
  fi
  printf " %s\n" $2
}

update()
{
  printf "\n\nSource code for $version (branch: $branch):\n"
  printf "\tReleased $revdate\n"
  printcount $numfiles "files"
  printcount $numlines "lines"
  printcount $numchars "chars"
  printf "\nBenchmark results\n"
  total="0"
  printtime "nqueens 14" $nqtime $nqreal "$nqmem"
  printtime "qcover 12" $qctime $qcreal "$qcmem"
  printtime "phils 800" $phils8 $phils8real "$phils8mem"
  printtime "kanban 75" $kan7 $kan7real "$kan7mem"
  printtime "slot 20" $slot20 $slot20real "$slot20mem"
  printtime "phils 10000" $phils10k $phils10kreal "$phils10kmem"
  printtime "kanban 200" $kan2 $kan2real "$kan2mem"
  printtime "slot 100" $slot1 $slot1real "$slot1mem"
  printtime "kanban 6" $kanex $kanexreal "$kanexmem"
  printtime "slot 7" $slotex $slotexreal "$slotexmem"
  ctotal=`echo "$total" | bc`
  printf "\n%20s %10s\n\n" "Total" "$ctotal"
}

updatehtml()
{
  printf "<tr>\n    <td>$revdate</td>\n"
  printf "    <td>$version</td>\n"
  printf "    <td>"
  printcount $numfiles "</td>"
  printf "    <td>"
  printcount $numlines "</td>"
  printf "    <td>"
  printcount $numchars "</td>"

  printf "    <td>%s s</td>\n" `time2sec $nqtime`
  printf "    <td>%s s</td>\n" `time2sec $qctime`
  printf "    <td>%s s</td>\n" `time2sec $phils8`
  printf "    <td>%s s</td>\n" `time2sec $kan7`
  printf "    <td>%s s</td>\n" `time2sec $slot20`
  printf "    <td>%s s</td>\n" `time2sec $phils10k`
  printf "    <td>%s s</td>\n" `time2sec $kan2`
  printf "    <td>%s s</td>\n" `time2sec $slot1`
  printf "    <td>%s s</td>\n" `time2sec $kanex`
  printf "    <td>%s s</td>\n" `time2sec $slotex`
  printf "</tr>\n"
}

runchild()
{
  $@ 2>&1 | tee $OUTTXT 2>&1 &
  pid=$!
  echo $pid > $PIDTXT
  sleepandkill $pid &
  sid=$!
  echo $sid >> $PIDTXT
  wait $pid
  kill $sid > /dev/null 2> /dev/null
}

run()
{
  hr="==============================================================="
  printf "\n%s\n$1\n%s\n\n" $hr $hr
  time (runchild $1) 2> $TIMESTXT
  thistime=`awk '/user/{print $2}' $TIMESTXT`
  thisreal=`awk '/real/{print $2}' $TIMESTXT`
  thismem=`awk '/peak memory allocated/{print $1" "$2";"}' $OUTTXT`
}


# Terminate cleanly on ctrl-C

ctrl_c() {
  printf "\n\nCaught CTRL-C, bailing out\n\n"
# cleanup here
  printf "\tCleaning up children: "
  cat $PIDTXT | xargs
  printf "\n\n"
  cat $PIDTXT | xargs kill
  rm -f $OUTTXT $TIMESTXT $PIDTXT
  exit 1
}

trap ctrl_c INT

# Grab file stats

version=$($EXDIR/libinfo | awk '{print $3}')
revdate=$($EXDIR/libinfo 5)
branch=$(git status | head -n 1 | awk '{print $3}')
numfiles=$(ls $SRCDIR/*.h $SRCDIR/*.cc $SRCDIR/*/*.h $SRCDIR/*/*.cc | wc -l)
numlines=$(wc -l $SRCDIR/*.h $SRCDIR/*.cc $SRCDIR/*/*.h $SRCDIR/*/*.cc | tail -1 | awk '{print $1}')
numchars=$(wc -c $SRCDIR/*.h $SRCDIR/*.cc $SRCDIR/*/*.h $SRCDIR/*/*.cc | tail -1 | awk '{print $1}')
update

# Run benchmarks

run "$EXDIR/nqueens 14"
nqtime=$thistime
nqreal=$thisreal
nqmem=$thismem
update

run "$EXDIR/queen_cover 12"
qctime=$thistime
qcreal=$thisreal
qcmem=$thismem
update

run "$EXDIR/dining_phils -n800"
phils8=$thistime
phils8real=$thisreal
phils8mem=$thismem
update

run "$EXDIR/kanban 75 -bfs"
kan7=$thistime
kan7real=$thisreal
kan7mem=$thismem
update

run "$EXDIR/slot 20 -bfs"
slot20=$thistime
slot20real=$thisreal
slot20mem=$thismem
update

run "$EXDIR/dining_phils -n10000 -dfs"
phils10k=$thistime
phils10kreal=$thisreal
phils10kmem=$thismem
update

run "$EXDIR/kanban 200 -dfs"
kan2=$thistime
kan2real=$thisreal
kan2mem=$thismem
update

run "$EXDIR/slot 100 -dfs"
slot1=$thistime
slot1real=$thisreal
slot1mem=$thismem
update

run "$EXDIR/kanban 6 -exp"
kanex=$thistime
kanexreal=$thisreal
kanexmem=$thismem
update


run "$EXDIR/slot 7 -exp"
slotex=$thistime
slotexreal=$thisreal
slotexmem=$thismem
update | tee $TEXTFILE

if [ "$HTMLFILE" != "" ]; then
  updatehtml >> $HTMLFILE
fi

# Kill tail process
rm -f $OUTTXT $TIMESTXT $PIDTXT
